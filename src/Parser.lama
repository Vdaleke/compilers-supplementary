-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun makeBinop(op) {
  [s(op), fun(l, op, r) {Binop(op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({
        [Left, { makeBinop("!!") }],
        [Left, { makeBinop("&&") }],
        [Nona, {
          makeBinop("=="),
          makeBinop("!="),
          makeBinop("<="),
          makeBinop("<"),
          makeBinop(">="),
          makeBinop(">")
        }],
        [Left, {
          makeBinop("+"),
          makeBinop("-")
        }],
        [Left, {
          makeBinop("*"),
          makeBinop("/"),
          makeBinop("%")
        }]
      }, primary);

var stmt = memo $ eta syntax(
    one_stmt |
    s1=one_stmt s[";"] s2=stmt { Seq(s1, s2) }
  ),
  one_stmt = memo $ eta syntax(
    kSkip { Skip } |
    kRead x=inbr[s("("), lident, s(")")] { Read(x) } |
    kWrite e=inbr[s("("), exp, s(")")] { Write(e) } |
    x=lident s[":="] e=exp { Assn(x, e) } 
);

-- Public top-level parser
public parse = stmt;
             